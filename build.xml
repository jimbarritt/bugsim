<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="bugsim" default="build-osx-app">

    <property name="src.dir" value="${basedir}/src"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="target.dir" value="${basedir}/target"/>

    <property name="dependency.file" value="${basedir}/dependencies.xml"/>

    <property name="src.build.dir" value="${src.dir}/build"/>
    <property name="src.build.macros.dir" value="${src.build.dir}/macros" />
    <property name="src.build.ivy.settings.file" value="${src.build.dir}/ivy-settings.xml"/>

    <property name="src.main.dir" value="${src.dir}/main"/>
    <property name="src.main.java.dir" value="${src.main.dir}/java"/>

    <property name="src.test.dir" value="${src.dir}/test"/>
    <property name="src.test.java.dir" value="${src.test.dir}/java"/>
    <property name="src.test.java.fixture.dir" value="${src.test.java.dir}/fixture"/>
    <property name="src.test.java.unit.dir" value="${src.test.java.dir}/unit"/>
    <property name="src.test.java.functional.dir" value="${src.test.java.dir}/functional"/>

    <property name="src.resource.dir" value="${src.dir}/main/resource"/>

    <property name="lib.build.dir" value="${lib.dir}/build"/>
    <property name="lib.main.dir" value="${lib.dir}/main"/>
    <property name="lib.test.fixture.dir" value="${lib.dir}/test.fixture"/>
    <property name="lib.test.unit.dir" value="${lib.dir}/test.unit"/>
    <property name="lib.test.functional.dir" value="${lib.dir}/test.functional"/>

    <property name="target.classes.dir" value="${target.dir}/classes"/>
    <property name="target.classes.main.dir" value="${target.classes.dir}/main"/>
    <property name="target.classes.test.dir" value="${target.classes.dir}/test"/>
    <property name="target.classes.test.fixture.dir" value="${target.classes.test.dir}/fixture"/>
    <property name="target.classes.test.unit.dir" value="${target.classes.test.dir}/unit"/>
    <property name="target.classes.test.functional.dir" value="${target.classes.test.dir}/functional"/>

    <property name="target.report.dir" value="${target.dir}/report"/>
    <property name="target.report.test.dir" value="${target.report.dir}/test"/>
    <property name="target.report.test.fixture.dir" value="${target.report.test.dir}/fixture"/>
    <property name="target.report.test.unit.dir" value="${target.report.test.dir}/unit"/>
    <property name="target.report.test.functional.dir" value="${target.report.test.dir}/functional"/>

    <import file="${src.build.macros.dir}/ivy.xml"/>
    <import file="${src.build.macros.dir}/report.xml"/>
    <import file="${src.build.macros.dir}/clean.xml"/>
    <import file="${src.build.macros.dir}/compile.xml"/>
    <import file="${src.build.macros.dir}/junit.xml"/>


    <path id="classpath.main.compile">
        <fileset dir="${lib.main.dir}/jar/" includes="**/*.jar"/>
        <path location="${src.resource.dir}/" />
    </path>

    <path id="classpath.test.fixture.compile">
        <fileset dir="${lib.test.fixture.dir}/jar/" includes="**/*.jar" />
        <path refid="classpath.main.compile" />
    </path>

    <path id="classpath.test.unit.compile">
        <path location="${target.classes.main.dir}" />
        <path location="${target.classes.test.fixture.dir}" />
        
        <fileset dir="${lib.test.unit.dir}/jar/" includes="**/*.jar" />
        <path refid="classpath.main.compile" />
        <path refid="classpath.test.fixture.compile" />
    </path>

    <path id="classpath.test.unit.run">
        <path location="${target.classes.test.unit.dir}" />
        <path refid="classpath.test.unit.compile" />
    </path>

    <path id="classpath.test.functional.compile">
        <path location="${target.classes.main.dir}" />
        <path location="${target.classes.test.fixture.dir}" />
        <path refid="classpath.test.fixture.compile" />
        <path refid="classpath.main.compile" />
        <fileset dir="${lib.test.functional.dir}/jar/" includes="**/*.jar" />
    </path>

    <path id="classpath.test.functional.run">
        <path location="${target.classes.test.functional.dir}" />
        <path refid="classpath.test.functional.compile" />
    </path>



    <target name="report.config" description="--> lists some important configuration information">
        <echo message="ant.home        : ${ant.home}"/>
        <echo message="os.name         : ${os.name}"/>
        <echo message="basedir         : ${basedir}"/>
        <echo message="skip.update.lib : ${skip.update.lib}" />
    </target>

    <target name="clean" description="--> remove all files created with this build script">
        <clean-dir target.dir="${target.dir}"/>
    </target>

    <target name="clean.lib" description="--> remove all libraries that have been downloaded">
        <clean-dir target.dir="${lib.dir}"/>
    </target>

    <target name="clean.everything" depends="clean, clean.lib"
            description="--> cleans everything, including ivy and libs"/>

    <target name="update.lib" description="--> updates the lib folder with new dependencies">
        <ivy-update-lib lib.dir="${lib.dir}"
                        ivy.install.dir="${lib.build.dir}"
                        dependency.file="${dependency.file}"
                        settings.file="${src.build.ivy.settings.file}"/>
    </target>

    <available file="${lib.dir}" property="skip.update.lib"/>
    <target name="update.lib.if.required" unless="skip.update.lib">
        <antcall target="update.lib" />
    </target>

    <target name="update.lib.skipped" depends="update.lib.if.required"  if="skip.update.lib">
        <echo message="lib.dir [${lib.dir}] already exists" />
        <echo message="Not updating libs, use [update.lib] to force update" />
    </target>

    <target name="compile" depends="update.lib.skipped, compile.main, compile.test.fixtures, compile.unit.tests, compile.functional.tests"
            description="--> compiles all sources, including tests"/>

    <target name="compile.main">
        <compile-java configuration="main"
                      src.dir="${src.main.java.dir}"
                      classpath.refid="classpath.main.compile"
                      target.classes.dir="${target.classes.main.dir}"
                      java.version="1.5"
                      hide.warnings="false"/>
    </target>

    <target name="test" description="--> runs all the tests" depends="compile, run.unit.tests, run.functional.tests"/>

    <target name="compile.test.fixtures">
        <compile-java configuration="test.fixtures"
            src.dir="${src.test.java.fixture.dir}"
            classpath.refid="classpath.test.fixture.compile"
            target.classes.dir="${target.classes.test.fixture.dir}"
            java.version="1.5"/>
    </target>

    <target name="compile.unit.tests">
        <compile-java configuration="unit.test"
        src.dir="${src.test.java.unit.dir}"
        classpath.refid="classpath.test.unit.compile"
        target.classes.dir="${target.classes.test.unit.dir}"
        java.version="1.5"/>
    </target>

    <target name="run.unit.tests" depends="compile.unit.tests"
            description="--> compiles and runs the unit tests">
         <run-junit configuration="unit.test"
                    classpath.refid="classpath.test.unit.run"
                    report.dir="${target.report.test.unit.dir}"
                    src.test.dir="${src.test.java.unit.dir}" />
    </target>

    <target name="report.unit.test.failures" description="--> opens the unit test failures in a browser">
            <junit-open-reports configuration="unit.test"
                                report.dir="${target.report.test.unit.dir}" />
    </target>

    <target name="compile.functional.tests">
            <compile-java configuration="functional.test"
                          src.dir="${src.test.java.functional.dir}"
                          classpath.refid="classpath.test.functional.compile"
                          target.classes.dir="${target.classes.test.functional.dir}"
                          java.version="1.5"/>
        </target>

        <target name="run.functional.tests" depends="compile.functional.tests"
                description="--> compiles and runs the functional tests">
             <run-junit configuration="functional.test"
                        classpath.refid="classpath.test.functional.run"
                        report.dir="${target.report.test.functional.dir}"
                        src.test.dir="${src.test.java.functional.dir}" />
        </target>

        <target name="report.functional.test.failures" description="--> opens the functional test failures in a browser">
                <junit-open-reports configuration="functional.test"
                                    report.dir="${target.report.test.unit.dir}" />
        </target>


    <target name="build-osx-app" depends="report.config, clean"
            description="--> does everything nescessary to create a .app package in the target directory">
    </target>

</project>